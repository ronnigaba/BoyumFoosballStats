@page "/MatchOverview"
@inject IJSRuntime jsRuntime
<h3>Matches</h3>

@if (@Matches.Any())
{
    <RadzenDataGrid PageSize="10" AllowPaging="true" Data="@Matches" CellRender="@CellRender" @ref="dataGrid">
        <Columns>
            <RadzenDataGridColumn TItem="Match" Property="Black.Attacker" Title="Attacker black" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="Match" Property="Black.Defender" Title="Defender black" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="Match" Property="Gray.Attacker" Title="Attacker gray" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="Match" Property="Gray.Defender" Title="Defender gray" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="Match" Property="ScoreBlack" Title="Score black" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="Match" Property="ScoreGray" Title="Score gray" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="Match" Property="MatchDate" Title="Date" TextAlign="TextAlign.Left">
                <Template Context="match">
                    @match.MatchDate.ToString("dd/MM/yyy")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Match" Property="Id" TextAlign="TextAlign.Right">
                <Template Context="match">
                    <RadzenButton Text="Delete"
                              Click="@(args => ConfirmDeleteEntry(match.Id))">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    public List<Match> Matches = new List<Match>();
    private AzureBlobStorageHelper blobHelper;
    private RadzenDataGrid<Match> dataGrid;

    protected override async Task OnInitializedAsync()
    {
        blobHelper = new AzureBlobStorageHelper();
        Matches = await blobHelper.GetMatches(AzureBlobStorageHelper.DefaultFileName);
    }
    
    void CellRender(DataGridCellRenderEventArgs<Match> args)
    {
        var backgroundColor = "background-color:";
        var backgroundGreen = backgroundColor + "rgba(0, 171, 28, 0.3);";
        var backgroundRed = backgroundColor + "rgba(255, 99, 71, 0.3);";
        if (args.Column.Property == "Black.Attacker" || args.Column.Property == "Black.Defender" || args.Column.Property == "ScoreBlack")
        {
            args.Attributes.Add("style", $"{(args.Data.WinningTeam.Side == TableSide.Black ? backgroundGreen : backgroundRed)};");
        }
        if (args.Column.Property == "Gray.Attacker" || args.Column.Property == "Gray.Defender" || args.Column.Property == "ScoreGray")
        {
            args.Attributes.Add("style", $"{(args.Data.WinningTeam.Side == TableSide.Gray ? backgroundGreen : backgroundRed)};");
        }
    }

    private async void ConfirmDeleteEntry(string id)
    {
        if (!await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this match?"))
        {
            return;
        }
        Matches.RemoveAll(x => x.Id == id);
        await blobHelper.UploadMatches(Matches, AzureBlobStorageHelper.DefaultFileName, true);
        await dataGrid.Reload();
    }

}
