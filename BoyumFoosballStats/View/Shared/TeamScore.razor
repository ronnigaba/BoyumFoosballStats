@using BoyumFoosballStats.Model.Enums
    @if (Team != null)
{
    <p>@GetTeamName()</p>
    <div class="row">
        <div class="col-12 d-flex align-items-center">
            <RadzenDropDown TValue="Player?" @bind-Value="Team.Attacker" Placeholder="Attacker" Data="@Players" Change="@TeamChangedInternal"></RadzenDropDown>
            <RadzenButton Click="SwapPlayers" Icon="compare_arrows" ButtonStyle="ButtonStyle.Light"></RadzenButton>
            <RadzenDropDown TValue="Player?" @bind-Value="Team.Defender" Placeholder="Defender" Data="@Players" Change="@TeamChangedInternal"></RadzenDropDown>
        </div>
    </div>
}
<p>Score</p>
<div class="row">
    <div class="col-12 d-flex align-items-center">
        <InputNumber @bind-Value="InternalScore" />
    </div>
</div>
@code
{
    private string GetTeamName()
    {
        return Team?.Side == null ? string.Empty : Enum.GetName(Team.Side);
    }

    private int InternalScore
    {
        get => Score;
        set
        {
            if (value != Score)
            {
                ScoreChanged.InvokeAsync(value);
            }
        }
    }

    public List<Player> Players = Enum.GetValues<Player>().ToList();

    [Parameter]
    public Team? Team { get; set; }

    [Parameter]
    public int Score { get; set; }

    [Parameter]
    public EventCallback<Team> TeamChanged { get; set; }

    [Parameter]
    public EventCallback<int> ScoreChanged { get; set; }

    [Parameter]
    public EventCallback OnTeamChanged { get; set; }

    public void TeamChangedInternal()
    {
        OnTeamChanged.InvokeAsync();
    }

    private void SwapPlayers()
    {
        var temp = Team.Attacker;
        Team.Attacker = Team.Defender;
        Team.Defender = temp;
    }
}